// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegisterAPIClient is the client API for RegisterAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterAPIClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	GetRedirection(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*RedirectionURL, error)
	CreateRedirection(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*RedirectionURL, error)
}

type registerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterAPIClient(cc grpc.ClientConnInterface) RegisterAPIClient {
	return &registerAPIClient{cc}
}

func (c *registerAPIClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/ch_url_shortener.RegisterAPI/ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerAPIClient) GetRedirection(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*RedirectionURL, error) {
	out := new(RedirectionURL)
	err := c.cc.Invoke(ctx, "/ch_url_shortener.RegisterAPI/getRedirection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerAPIClient) CreateRedirection(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*RedirectionURL, error) {
	out := new(RedirectionURL)
	err := c.cc.Invoke(ctx, "/ch_url_shortener.RegisterAPI/createRedirection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterAPIServer is the server API for RegisterAPI service.
// All implementations must embed UnimplementedRegisterAPIServer
// for forward compatibility
type RegisterAPIServer interface {
	Ping(context.Context, *Empty) (*wrapperspb.StringValue, error)
	GetRedirection(context.Context, *GetRequest) (*RedirectionURL, error)
	CreateRedirection(context.Context, *CreateRequest) (*RedirectionURL, error)
	mustEmbedUnimplementedRegisterAPIServer()
}

// UnimplementedRegisterAPIServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterAPIServer struct {
}

func (UnimplementedRegisterAPIServer) Ping(context.Context, *Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedRegisterAPIServer) GetRedirection(context.Context, *GetRequest) (*RedirectionURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedirection not implemented")
}
func (UnimplementedRegisterAPIServer) CreateRedirection(context.Context, *CreateRequest) (*RedirectionURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRedirection not implemented")
}
func (UnimplementedRegisterAPIServer) mustEmbedUnimplementedRegisterAPIServer() {}

// UnsafeRegisterAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterAPIServer will
// result in compilation errors.
type UnsafeRegisterAPIServer interface {
	mustEmbedUnimplementedRegisterAPIServer()
}

func RegisterRegisterAPIServer(s grpc.ServiceRegistrar, srv RegisterAPIServer) {
	s.RegisterService(&RegisterAPI_ServiceDesc, srv)
}

func _RegisterAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ch_url_shortener.RegisterAPI/ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterAPIServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterAPI_GetRedirection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterAPIServer).GetRedirection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ch_url_shortener.RegisterAPI/getRedirection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterAPIServer).GetRedirection(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterAPI_CreateRedirection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterAPIServer).CreateRedirection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ch_url_shortener.RegisterAPI/createRedirection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterAPIServer).CreateRedirection(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterAPI_ServiceDesc is the grpc.ServiceDesc for RegisterAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ch_url_shortener.RegisterAPI",
	HandlerType: (*RegisterAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ping",
			Handler:    _RegisterAPI_Ping_Handler,
		},
		{
			MethodName: "getRedirection",
			Handler:    _RegisterAPI_GetRedirection_Handler,
		},
		{
			MethodName: "createRedirection",
			Handler:    _RegisterAPI_CreateRedirection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/product.proto",
}
